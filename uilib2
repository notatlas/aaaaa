local library = {}
repeat task.wait() until game:IsLoaded()

local playerService = game:GetService("Players")
local tweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")

local player = playerService.LocalPlayer

local function GenerateRandomName()
	local Table = {}

	for i = 1, math.random(8, 19) do
		Table[i] = string.char(math.random(96, 122))
	end

	return table.concat(Table)
end

function library:InitUI(keybind)
	local screenGui = Instance.new("ScreenGui", player.PlayerGui)
	screenGui.Name = GenerateRandomName()
	screenGui.ResetOnSpawn = false
	screenGui.DisplayOrder = math.huge - 1
	
	local holder = Instance.new("Frame", screenGui)
	holder.Name = GenerateRandomName()
	holder.BackgroundColor3 = Color3.fromRGB(27,27,29)
	holder.BackgroundTransparency = 0.135
	holder.Position = UDim2.new(0.075, 0, 0.133, 0)
	holder.Size = UDim2.new(0, 482, 0, 515)
	holder.Draggable = true
	holder.Active = true
	holder.BorderSizePixel = 0
	
	local holderUC = Instance.new("UICorner", holder)
	holderUC.Name = GenerateRandomName()
	holderUC.CornerRadius = UDim.new(0, 7)
	
	local holderUS = Instance.new("UIStroke", holder)
	holderUS.Name = GenerateRandomName()
	holderUS.Color = Color3.fromRGB(31, 31, 31)
	holderUS.Transparency = 0.6
	
	local holderBar = Instance.new("Frame", holder)
	holderBar.Name = GenerateRandomName()
	holderBar.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
	holderBar.Position = UDim2.new(0, 0, -0.005, 0)
	holderBar.Size = UDim2.new(1, 0, 0, 20)
	holderBar.BorderSizePixel = 0
	
	local holderBarUC = Instance.new("UICorner", holderBar)
	holderBarUC.Name = GenerateRandomName()
	holderBarUC.CornerRadius = UDim.new(0, 7)
	
	local holderBarO = Instance.new("Frame", holderBar)
	holderBarO.Name = GenerateRandomName()
	holderBarO.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
	holderBarO.Position = UDim2.new(0, 0, 0.545, 0)
	holderBarO.Size = UDim2.new(1, 0, 0, 12)
	holderBarO.BorderSizePixel = 0
	
	local holderBarT = Instance.new("TextLabel", holderBar)
	holderBarT.Name = GenerateRandomName()
	holderBarT.BackgroundTransparency = 1
	holderBarT.Position = UDim2.new(0.017, 0, 0.15, 0)
	holderBarT.Size = UDim2.new(0, 135, 0, 19)
	holderBarT.ZIndex = 2
	holderBarT.Font = Enum.Font.Gotham
	holderBarT.Text = "Kinetic Lite"
	holderBarT.TextColor3 = Color3.fromRGB(255, 255, 255)
	holderBarT.TextSize = 11
	holderBarT.TextXAlignment = Enum.TextXAlignment.Left
	
	local holderLine = Instance.new("Frame", holder)
	holderLine.Name = GenerateRandomName()
	holderLine.BackgroundColor3 = Color3.fromRGB(33,33,34)
	holderLine.Position = UDim2.new(0.017, 0, 0.112, 0)
	holderLine.Size = UDim2.new(0, 467, 0, 1)
	holderLine.BorderSizePixel = 0
	holderLine.ZIndex = 2
	
	local holderKey = Instance.new("TextLabel", holder)
	holderKey.Name = GenerateRandomName()
	holderKey.BackgroundTransparency = 1
	holderKey.Position = UDim2.new(0.70, 0, 0.936, 0)
	holderKey.Size = UDim2.new(0, 126, 0, 33)
	holderKey.ZIndex = 2
	holderKey.Font = Enum.Font.SourceSans
	holderKey.Text = "Menu toggle keybind: " .. keybind.Name
	holderKey.TextColor3 = Color3.fromRGB(156, 156, 156)
	holderKey.TextSize = 14
	
	local saveOldPosition, absolutePosition = 0, 0
	local tickOld = tick()
	
	UserInputService.InputBegan:Connect(function(input, _1)
		if _1 then return end
		
		if input.KeyCode == keybind and tick() - tickOld > 0.55 then
			if holder.Visible == true then
				saveOldPosition, absolutePosition = holder.Position, holder.AbsolutePosition
				task.wait()
				tweenService:Create(holder, TweenInfo.new(0.4), {Position = UDim2.new(2, 0, 0, holder.AbsolutePosition.Y)}):Play()
				task.delay(0.4, function()
					holder.Visible = false
				end)
			elseif holder.Visible == false then
				holder.Visible = true
				holder.Position = UDim2.new(-2, 0, 0, absolutePosition.Y)
				tweenService:Create(holder, TweenInfo.new(0.4), {Position = saveOldPosition}):Play()
			end
			tickOld = tick()
		end
	end)
	
	local guiInstances = {Objects = {}, CurrentTab = nil, Count = 0}
	
	function guiInstances:CreateTab(name)
		guiInstances.Count += 1
		
		local holderTab = Instance.new("Frame", holder)
		holderTab.Name = GenerateRandomName()
		holderTab.BackgroundColor3 = Color3.fromRGB(12, 12, 15)
		holderTab.Position = UDim2.new(0.036, 0, 0.075, 0)
		holderTab.Size = UDim2.new(0, 52, 0, 20)
		holderTab.BorderSizePixel = 0
		
		local holderTabUC = Instance.new("UICorner", holderTab)
		holderTabUC.Name = GenerateRandomName()
		holderTabUC.CornerRadius = UDim.new(0, 7)
		
		local holderTabO = Instance.new("Frame", holderTab)
		holderTabO.Name = GenerateRandomName()
		holderTabO.BackgroundColor3 = Color3.fromRGB(12, 12, 15)
		holderTabO.Position = UDim2.new(0, 0, 0.545, 0)
		holderTabO.Size = UDim2.new(1, 0, 0, 9)
		holderTabO.BorderSizePixel = 0
		
		local holderTabT = Instance.new("TextLabel", holderTab)
		holderTabT.Name = GenerateRandomName()
		holderTabT.BackgroundTransparency = 1
		holderTabT.Position = UDim2.new(0, 0, 0.15, 0)
		holderTabT.Size = UDim2.new(1, 0, 0, 17)
		holderTabT.ZIndex = 2
		holderTabT.Font = Enum.Font.GothamMedium
		holderTabT.Text = name
		holderTabT.TextColor3 = Color3.fromRGB(255, 255, 255)
		holderTabT.TextSize = 11
		
		local holderTabB = Instance.new("TextButton", holderTab)
		holderTabB.Name = GenerateRandomName()
		holderTabB.AutoButtonColor = false
		holderTabB.BackgroundTransparency = 1
		holderTabB.Size = UDim2.new(1, 0, 1, 0)
		holderTabB.Text = ""
		holderTabB.ZIndex = 2
		
		local holderSF = Instance.new("ScrollingFrame", holder)
		holderSF.Name = GenerateRandomName()
		holderSF.BackgroundTransparency = 1
		holderSF.Position = UDim2.new(0.036, 0, 0.144, 0)
		holderSF.Size = UDim2.new(0, 464, 0, 440)
		holderSF.ScrollBarThickness = 0
		holderSF.BorderSizePixel = 0

		--[[local holderSFLL = Instance.new("UIListLayout", holderSF)
		holderSFLL.Name = GenerateRandomName()
		holderSFLL.FillDirection = Enum.FillDirection.Vertical
		holderSFLL.HorizontalAlignment = Enum.HorizontalAlignment.Left
		holderSFLL.VerticalAlignment = Enum.VerticalAlignment.Top
		holderSFLL.Padding = UDim.new(0, 9)--]]
		
		local getNextPosition = 0
		for i,v in pairs(guiInstances.Objects) do if string.find(tostring(i), "Tab") then getNextPosition += v.Title.TextBounds.X + 36 end end

		holderTab.Size = UDim2.new(0, holderTabT.TextBounds.X + 31, 0, 20)
		holderTab.Position = UDim2.new(0.036, getNextPosition, 0.075, 0)
		
		guiInstances.Objects[name.."Tab"] = {
			Tab = holderTab,
			UICorner = holderTabUC,
			Overlay = holderTabO,
			Title = holderTabT,
			Button = holderTabB,
			MainFrame = holderSF,
			--MainFrameUIListLayout = holderSFLL,
			SizeInPixels = 0,
			SkippingFirst = true,
		}
		
		holderSF.Visible = false
		
		if guiInstances.Count == 1 then
			guiInstances.CurrentTab = holderTabT.Text
			tweenService:Create(holderTab, TweenInfo.new(0.1), {BackgroundColor3 = Color3.fromRGB(43, 43, 41)}):Play()
			tweenService:Create(holderTabO, TweenInfo.new(0.1), {BackgroundColor3 = Color3.fromRGB(43, 43, 41)}):Play()
			task.wait(0.075)
			holderSF.Visible = true
		end
		
		holderTabB.MouseButton1Down:Connect(function()
			if guiInstances.CurrentTab ~= holderTabT.Text then
				tweenService:Create(holderTab, TweenInfo.new(0.1), {BackgroundColor3 = Color3.fromRGB(43, 43, 41)}):Play()
				tweenService:Create(holderTabO, TweenInfo.new(0.1), {BackgroundColor3 = Color3.fromRGB(43, 43, 41)}):Play()
				
				tweenService:Create(guiInstances.Objects[guiInstances.CurrentTab .."Tab"].Tab, TweenInfo.new(0.1), {BackgroundColor3 = Color3.fromRGB(12, 12, 15)}):Play()
				tweenService:Create(guiInstances.Objects[guiInstances.CurrentTab .."Tab"].Overlay, TweenInfo.new(0.1), {BackgroundColor3 = Color3.fromRGB(12, 12, 15)}):Play()
				guiInstances.Objects[guiInstances.CurrentTab .."Tab"].MainFrame.Visible = false
				
				task.wait(0.075)
				holderSF.Visible = true
				
				guiInstances.CurrentTab = holderTabT.Text
			end
		end)
		
		local function CalculateNewSize()
			--local studs = guiInstances.Objects[name .."Tab"].SizeInPixels
			
			--if studs > holderSF.AbsoluteSize.Y then studs = holderSF.AbsoluteSize.Y + 25 end
			holderSF.CanvasSize = UDim2.new(0, 0, 0, guiInstances.Objects[name .."Tab"].SizeInPixels + 35)
		end
		
		CalculateNewSize(holderSF)
		
		local cheat = {}
		
		function cheat:Checkbox(Properties)
			guiInstances.Count += 1
			
			if guiInstances.Objects[name .."Tab"].SkippingFirst == false then
				guiInstances.Objects[name .."Tab"].SizeInPixels += 24 + 9
			end
			
			if guiInstances.Objects[name .."Tab"].SizeInPixels == 0 and guiInstances.Objects[name .."Tab"].SkippingFirst == true then
				guiInstances.Objects[name .."Tab"].SkippingFirst = false
			end

			local title = Properties.Title or "Checkbox"
			local callback = Properties.Callback or function(val) end
			
			local checkboxB = Instance.new("TextButton", holderSF)
			checkboxB.Name = GenerateRandomName()
			checkboxB.AutoButtonColor = false
			checkboxB.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
			checkboxB.BackgroundTransparency = 0.4
			checkboxB.Size = UDim2.new(0, 24, 0, 24)
			checkboxB.Position = UDim2.new(0, 0, 0, guiInstances.Objects[name.."Tab"].SizeInPixels)
			checkboxB.Text = ""
			checkboxB.ZIndex = 2
			
			local checkboxUC = Instance.new("UICorner", checkboxB)
			checkboxUC.Name = GenerateRandomName()
			checkboxUC.CornerRadius = UDim.new(0, 3)
			
			local check = Instance.new("ImageLabel", checkboxB)
			check.BackgroundTransparency = 1
			check.Position = UDim2.new(0, 0, 0, 0)
			check.Size = UDim2.new(0, 24, 0, 24)
			check.ZIndex = 2
			check.Image = "rbxassetid://10796491103"
			check.ImageTransparency = 1
			
			local checkTitle = Instance.new("TextLabel", checkboxB)
			checkTitle.Name = GenerateRandomName()
			checkTitle.BackgroundTransparency = 1
			checkTitle.Position = UDim2.new(1.392, 0, 0.15, 0)
			checkTitle.Size = UDim2.new(0, 102, 0, 19)
			checkTitle.ZIndex = 1
			checkTitle.Font = Enum.Font.Gotham
			checkTitle.Text = title
			checkTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
			checkTitle.TextSize = 12
			checkTitle.TextXAlignment = Enum.TextXAlignment.Left
			
			guiInstances.Objects[title .."CheckBox"] = {
				Checkbox = checkboxB,
				UICorner = checkboxUC,
				ImageLabel = check,
				Title = checkTitle,
				Enabled = false
			}
			
			checkboxB.MouseButton1Down:Connect(function()
				guiInstances.Objects[title .."CheckBox"].Enabled = not guiInstances.Objects[title .."CheckBox"].Enabled
				
				if guiInstances.Objects[title .."CheckBox"].Enabled then
					tweenService:Create(check, TweenInfo.new(0.1), {ImageTransparency = 0}):Play()
				else
					tweenService:Create(check, TweenInfo.new(0.1), {ImageTransparency = 1}):Play()
				end
				
				if callback then callback(guiInstances.Objects[title .."CheckBox"].Enabled) end
			end)
			
			CalculateNewSize(holderSF)
		end
		
		function cheat:Text(text)
			guiInstances.Count += 1
			
			if guiInstances.Objects[name .."Tab"].SkippingFirst == false then
				guiInstances.Objects[name .."Tab"].SizeInPixels += 25 + 9
			end
			
			if guiInstances.Objects[name .."Tab"].SizeInPixels == 0 and guiInstances.Objects[name .."Tab"].SkippingFirst == true then
				guiInstances.Objects[name .."Tab"].SkippingFirst = false
			end
			
			local checkTitle = Instance.new("TextLabel", holderSF)
			checkTitle.Name = GenerateRandomName()
			checkTitle.BackgroundTransparency = 1
			checkTitle.Size = UDim2.new(0, 102, 0, 19)
			checkTitle.Position = UDim2.new(0, 0, 0, guiInstances.Objects[name.."Tab"].SizeInPixels)
			checkTitle.ZIndex = 1
			checkTitle.Font = Enum.Font.Gotham
			checkTitle.Text = text
			checkTitle.TextColor3 = Color3.fromRGB(156, 156, 156)
			checkTitle.TextSize = 12
			checkTitle.TextXAlignment = Enum.TextXAlignment.Left
			
			guiInstances.Objects[name .."Text"] =  {
				Title = checkTitle
			}
			
			CalculateNewSize(holderSF)
		end
		
		function cheat:Slider(Properties)
			guiInstances.Count += 1
			
			if guiInstances.Objects[name .."Tab"].SkippingFirst == false then
				guiInstances.Objects[name .."Tab"].SizeInPixels += 24 + 9
			end
			
			if guiInstances.Objects[name .."Tab"].SizeInPixels == 0 and guiInstances.Objects[name .."Tab"].SkippingFirst == true then
				guiInstances.Objects[name .."Tab"].SkippingFirst = false
			end
			
			local title = Properties.Title or "Slider"
			local type = Properties.Type or "Int"
			local min = Properties.Min or 0
			local max = Properties.Max or 100
			local callback = Properties.Callback or function(val) end
			
			local sliderBackground = Instance.new("Frame", holderSF)
			sliderBackground.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
			sliderBackground.BackgroundTransparency = 0.4
			sliderBackground.Size = UDim2.new(0, 280, 0, 24)
			sliderBackground.Position = UDim2.new(0, 0, 0, guiInstances.Objects[name.."Tab"].SizeInPixels)
			
			local sliderBackgroundUC = Instance.new("UICorner", sliderBackground)
			sliderBackgroundUC.Name = GenerateRandomName()
			sliderBackgroundUC.CornerRadius = UDim.new(0, 5)
			
			local slider = Instance.new("Frame", sliderBackground)
			slider.BackgroundColor3 = Color3.fromRGB(81, 81, 81)
			slider.BackgroundTransparency = 0.35
			slider.Position = UDim2.new(0, 2, 0.08, 0)
			slider.Size = UDim2.new(0, 10, 0, 20)
			
			local sliderUC = Instance.new("UICorner", slider)
			sliderUC.Name = GenerateRandomName()
			sliderUC.CornerRadius = UDim.new(0, 3)
			
			local sliderValue = Instance.new("TextLabel", sliderBackground)
			sliderValue.Name = GenerateRandomName()
			sliderValue.BackgroundTransparency = 1
			sliderValue.Position = UDim2.new(0, 0, 0.1, 0)
			sliderValue.Size = UDim2.new(1, 0, 0, 19)
			sliderValue.ZIndex = 2
			sliderValue.Font = Enum.Font.Gotham
			sliderValue.TextColor3 = Color3.fromRGB(255, 255, 255)
			sliderValue.TextSize = 12
			
			local sliderTitle = Instance.new("TextLabel", sliderBackground)
			sliderTitle.Name = GenerateRandomName()
			sliderTitle.BackgroundTransparency = 1
			sliderTitle.Position = UDim2.new(1.044, 0, 0.063, 0)
			sliderTitle.Size = UDim2.new(0, 102, 0, 19)
			sliderTitle.ZIndex = 2
			sliderTitle.Font = Enum.Font.Gotham
			sliderTitle.Text = title
			sliderTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
			sliderTitle.TextSize = 12
			sliderTitle.TextXAlignment = Enum.TextXAlignment.Left
			
			guiInstances.Objects[title .."Slider"] = {
				SliderBackground = sliderBackground,
				SliderBackgroundUICorner = sliderBackgroundUC,
				Slider = slider,
				SliderUICorner = sliderUC,
				SliderValue = sliderValue,
				SliderTitle = sliderTitle,
				Draggable = false,
				CurrentValue = 0
			}
			
			callback = callback or function(val) end
			
			if min >= 0 then
				local value = math.clamp((min / max) * (max - min) + min or 0, min, max)
				
				if type == "Int" then
					value = math.round(value)
				elseif type == "Float" then
					value = tonumber(string.format("%.2f", value))
				end
				
				sliderValue.Text = value
				
				guiInstances.Objects[title .."Slider"].CurrentValue = value
				if callback then callback(value) end
			end

			local function slide(input)
				local size = math.clamp(input.Position.X + 1 - sliderBackground.AbsolutePosition.X - 5, 0, 266)
				local percent = size / 266
				
				slider.Position = UDim2.new(0, size + 2, 0.08, 0)
				
				local value = math.clamp(math.round((min + (max - min) * percent) * 100) / 100, min, max)
				
				if type == "Int" then
					value = math.round(value)
				elseif type == "Float" then
					value = tonumber(string.format("%.2f", value))
				end
				
				sliderValue.Text = value
				
				guiInstances.Objects[title .."Slider"].CurrentValue = value
				
				if callback then callback(value) end
			end
			
			slider.InputBegan:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 then
					slide(input)
					holder.Draggable = false
					guiInstances.Objects[title .."Slider"].Draggable = true
				end
			end)

			slider.InputEnded:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 then
					holder.Draggable = true
					guiInstances.Objects[title .."Slider"].Draggable = false
				end
			end)

			sliderBackground.InputChanged:Connect(function(input)
				if guiInstances.Objects[title .."Slider"].Draggable and input.UserInputType == Enum.UserInputType.MouseMovement then
					slide(input)
				end
			end)
			
			CalculateNewSize(holderSF)
		end
		
		function cheat:Button(Properties)
			guiInstances.Count += 1

			if guiInstances.Objects[name .."Tab"].SkippingFirst == false then
				guiInstances.Objects[name .."Tab"].SizeInPixels += 24 + 9
			end

			if guiInstances.Objects[name .."Tab"].SizeInPixels == 0 and guiInstances.Objects[name .."Tab"].SkippingFirst == true then
				guiInstances.Objects[name .."Tab"].SkippingFirst = false
			end

			local title = Properties.Title or "Button"
			local callback = Properties.Callback or function() end
			
			local button = Instance.new("TextButton", holderSF)
			button.Name = GenerateRandomName()
			button.AutoButtonColor = false
			button.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
			button.BackgroundTransparency = 0.4
			button.Size = UDim2.new(0, 160, 0, 24)
			button.Position = UDim2.new(0, 0, 0, guiInstances.Objects[name.."Tab"].SizeInPixels)
			button.Text = title
			button.ZIndex = 2
			
			local buttonUC = Instance.new("UICorner", button)
			buttonUC.Name = GenerateRandomName()
			buttonUC.CornerRadius = UDim.new(0, 7)
			
			local buttonTitle = Instance.new("TextLabel", button)
			buttonTitle.Name = GenerateRandomName()
			buttonTitle.BackgroundTransparency = 1
			buttonTitle.Position = UDim2.new(0.18, 0, 0.1, 0)
			buttonTitle.Size = UDim2.new(0, 102, 0, 19)
			buttonTitle.ZIndex = 2
			buttonTitle.Font = Enum.Font.Gotham
			buttonTitle.Text = title
			buttonTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
			buttonTitle.TextSize = 12
			
			guiInstances.Objects[title .."Button"] = {
				Button = button,
				ButtonUICorner = buttonUC,
				ButtonTitle = buttonTitle
			}
			
			button.MouseButton1Down:Connect(function()
				if callback then callback() end
			end)
			
			CalculateNewSize(holderSF)
		end
		
		function cheat:Keybind(Properties)
			guiInstances.Count += 1
			
			local titleCheckbox = Properties.Checkbox.Title or "Checkbox"
			local titleKeybind = Properties.Title or "Keybind"
			local default = Properties.Default or Enum.KeyCode.E
			local callbackKeybind = Properties.Callback or function() end
			local callbackCheckbox = Properties.Checkbox.Callback or function() end
			
			if guiInstances.Objects[name .."Tab"].SkippingFirst == false then
				guiInstances.Objects[name .."Tab"].SizeInPixels += 24 + 9
			end

			if guiInstances.Objects[name .."Tab"].SizeInPixels == 0 and guiInstances.Objects[name .."Tab"].SkippingFirst == true then
				guiInstances.Objects[name .."Tab"].SkippingFirst = false
			end
			
			local checkboxB = Instance.new("TextButton", holderSF)
			checkboxB.Name = GenerateRandomName()
			checkboxB.AutoButtonColor = false
			checkboxB.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
			checkboxB.BackgroundTransparency = 0.4
			checkboxB.Size = UDim2.new(0, 24, 0, 24)
			checkboxB.Position = UDim2.new(0, 0, 0, guiInstances.Objects[name.."Tab"].SizeInPixels)
			checkboxB.Text = ""
			checkboxB.ZIndex = 2

			local checkboxUC = Instance.new("UICorner", checkboxB)
			checkboxUC.Name = GenerateRandomName()
			checkboxUC.CornerRadius = UDim.new(0, 3)

			local check = Instance.new("ImageLabel", checkboxB)
			check.BackgroundTransparency = 1
			check.Position = UDim2.new(0, 0, 0, 0)
			check.Size = UDim2.new(0, 24, 0, 24)
			check.ZIndex = 2
			check.Image = "rbxassetid://10796491103"
			check.ImageTransparency = 1

			local checkTitle = Instance.new("TextLabel", checkboxB)
			checkTitle.Name = GenerateRandomName()
			checkTitle.BackgroundTransparency = 1
			checkTitle.Position = UDim2.new(1.392, 0, 0.15, 0)
			checkTitle.Size = UDim2.new(0, 102, 0, 19)
			checkTitle.ZIndex = 1
			checkTitle.Font = Enum.Font.Gotham
			checkTitle.Text = titleCheckbox
			checkTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
			checkTitle.TextSize = 12
			checkTitle.TextXAlignment = Enum.TextXAlignment.Left
			
			
			local curKey
			curKey = curKey or default
			
			
			local keybindB = Instance.new("TextButton", checkboxB)
			keybindB.Name = GenerateRandomName()
			keybindB.AutoButtonColor = false
			keybindB.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
			keybindB.BackgroundTransparency = 0.4
			keybindB.Size = UDim2.new(0, 20, 0, 24)
			keybindB.Position = UDim2.new(0, 24 + checkTitle.TextBounds.X + 22, 0, 0)
			keybindB.Text = ""
			keybindB.ZIndex = 2

			local keybindUC = Instance.new("UICorner", keybindB)
			keybindUC.Name = GenerateRandomName()
			keybindUC.CornerRadius = UDim.new(0, 3)
			
			local keybindKeyTitle = Instance.new("TextLabel", keybindB)
			keybindKeyTitle.Name = GenerateRandomName()
			keybindKeyTitle.BackgroundTransparency = 1
			keybindKeyTitle.Position = UDim2.new(0, 2, 0.042, 0)
			keybindKeyTitle.Size = UDim2.new(0, 17, 0, 24)
			keybindKeyTitle.ZIndex = 2
			keybindKeyTitle.Font = Enum.Font.Gotham
			keybindKeyTitle.Text = curKey.Name
			keybindKeyTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
			keybindKeyTitle.TextSize = 12
			
			guiInstances.Objects[titleKeybind .."Keybind"] = {
				Checkbox = {
					Checkbox = checkboxB,
					UICorner = checkboxUC,
					ImageLabel = check,
					Title = checkTitle,
					Enabled = false
				},
				Keybind = keybindB,
				KeybindUICorner = keybindUC,
				KeyTitle = keybindKeyTitle,
				CurrentKey = curKey,
				KeyPressChange = false
			}
			
			checkboxB.MouseButton1Down:Connect(function()
				guiInstances.Objects[titleKeybind .."Keybind"].Checkbox.Enabled = not guiInstances.Objects[titleKeybind .."Keybind"].Checkbox.Enabled

				if guiInstances.Objects[titleKeybind .."Keybind"].Checkbox.Enabled then
					tweenService:Create(check, TweenInfo.new(0.1), {ImageTransparency = 0}):Play()
				else
					tweenService:Create(check, TweenInfo.new(0.1), {ImageTransparency = 1}):Play()
				end
				
				if callbackCheckbox then callbackCheckbox(guiInstances.Objects[titleKeybind .."Keybind"].Checkbox.Enabled) end
			end)
			
			local banned = {
				"Return",
				"Space",
				"Tab",
				"Unknown"
			}
			
			UserInputService.InputBegan:Connect(function(input, _1)
				if _1 then return end
				if not guiInstances.Objects[titleKeybind .."Keybind"].Checkbox.Enabled then return end

				if guiInstances.Objects[titleKeybind .."Keybind"].KeyPressChange == false and curKey and input.KeyCode == curKey and keybindKeyTitle.Text ~= "..." then
					if callbackKeybind then callbackKeybind(input.KeyCode) end
				end
			end)
			
			keybindB.MouseButton1Down:Connect(function()
				if guiInstances.Objects[titleKeybind .."Keybind"].Checkbox.Enabled then
					guiInstances.Objects[titleKeybind .."Keybind"].KeyPressChange = true
					keybindKeyTitle.Text = "..."
					
					task.delay(5, function()
						keybindKeyTitle.Text = curKey.Name
						guiInstances.Objects[titleKeybind .."Keybind"].KeyPressChange = false
					end)
					
					while keybindKeyTitle.Text == "..." do
						local input = UserInputService.InputBegan:Wait()
						
						if not table.find(banned, input.KeyCode.Name) then
							curKey = input.KeyCode

							keybindKeyTitle.Text = tostring(curKey.Name)
						end
						
						task.wait()
					end
					
					guiInstances.Objects[titleKeybind .."Keybind"].KeyPressChange = false
				end
				task.wait(0.1)
			end)
			
			CalculateNewSize()
		end
		
		return cheat
	end
	
	return guiInstances
end
